name: YouTube Downloader

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: "YouTube video URL"
        required: true
        type: string
      format:
        description: "Output format (mp3 or mp4)"
        required: true
        default: "mp3"
        type: choice
        options:
          - mp3
          - mp4
      quality:
        description: "Video quality (1080p, 720p, 480p — ignored for mp3)"
        required: false
        default: "720p" 
        type: choice
        options:
          - 1080p
          - 720p
          - 480p
      download_id: 
        description: "Unique identifier for tracking the download"
        required: true
        type: string

jobs:
  download:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache yt-dlp, ffmpeg, and yt-dlp cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/bin/yt-dlp
            ~/.local/bin/ffmpeg
            ~/.local/bin/ffprobe
            ~/.cache/yt-dlp
          key: yt-dlp-ffmpeg-cache-v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip curl tar jq

          # CORRECTED: Unconditionally install/upgrade yt-dlp to fix ModuleNotFoundError
          pip3 install --user --upgrade yt-dlp

          echo "$HOME/.local/bin" >> $GITHUB_PATH

          # Install static ffmpeg if missing
          if [ ! -f "$HOME/.local/bin/ffmpeg" ]; then
            curl -L https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz -o ffmpeg.tar.xz
            mkdir ffmpeg_tmp
            tar -xJf ffmpeg.tar.xz -C ffmpeg_tmp
            cp ffmpeg_tmp/*-amd64-static/ffmpeg $HOME/.local/bin/
            cp ffmpeg_tmp/*-amd64-static/ffprobe $HOME/.local/bin/
            chmod +x $HOME/.local/bin/ffmpeg $HOME/.local/bin/ffprobe
            rm -rf ffmpeg_tmp ffmpeg.tar.xz
          fi

      - name: Run YouTube Downloader
        env:
          YT_COOKIES: ${{ secrets.YT_COOKIES }}
        run: |
          URL="${{ github.event.inputs.video_url }}"
          FORMAT="${{ github.event.inputs.format }}"
          QUALITY="${{ github.event.inputs.quality }}"
          WORKDIR="$GITHUB_WORKSPACE/downloads"
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"

          echo "🎞️ Downloading: $URL"
          echo "📦 Format: $FORMAT | Quality: $QUALITY"

          if [ -n "$YT_COOKIES" ]; then
            echo "$YT_COOKIES" > cookies.txt
            COOKIE_ARG="--cookies cookies.txt"
          else
            COOKIE_ARG=""
          fi

          export YTDLP_CACHE_DIR="$HOME/.cache/yt-dlp"

          if [ "$FORMAT" = "mp3" ]; then
            # This is the correct logic for mp3 extraction
            yt-dlp -f bestaudio $COOKIE_ARG \
              --extract-audio --audio-format mp3 \
              --audio-quality 0 \
              --embed-thumbnail --embed-metadata \
              -o "%(title)s.%(ext)s" "$URL"
          else
            # This logic uses the QUALITY input for video
            yt-dlp -f "bestvideo[height<=${QUALITY%%p}]+bestaudio/best" $COOKIE_ARG \
              --merge-output-format mp4 \
              --output "%(title)s.%(ext)s" "$URL"
          fi

      - name: Upload to multiple file hosts
        run: |
          cd downloads
          echo "## 🔗 Direct Download Links" >> $GITHUB_STEP_SUMMARY
          
          # Clean up unwanted files first
          rm -f cookies.txt 2>/dev/null || true
          
          for file in *; do
            if [ -f "$file" ]; then
              echo "### 📁 $file" >> $GITHUB_STEP_SUMMARY
              echo "Processing $file..."
              
              # Method 1: Transfer.sh (Most reliable)
              echo "Uploading to transfer.sh..."
              TRANSFER_URL=$(curl --silent --upload-file "$file" "https://transfer.sh/$file")
              if [ -n "$TRANSFER_URL" ] && [[ $TRANSFER_URL == http* ]]; then
                echo "- **Transfer.sh**: [Download]($TRANSFER_URL) (14 days)" >> $GITHUB_STEP_SUMMARY
                echo "✅ Transfer.sh: $TRANSFER_URL"
              else
                echo "- ❌ Transfer.sh failed" >> $GITHUB_STEP_SUMMARY
              fi
              
              # Method 2: 0x0.st
              echo "Uploading to 0x0.st..."
              OXOX_RESPONSE=$(curl -s -F "file=@$file" https://0x0.st)
              if [ -n "$OXOX_RESPONSE" ] && [[ $OXOX_RESPONSE == http* ]]; then
                echo "- **0x0.st**: [Download]($OXOX_RESPONSE)" >> $GITHUB_STEP_SUMMARY
                echo "✅ 0x0.st: $OXOX_RESPONSE"
              else
                echo "- ❌ 0x0.st failed" >> $GITHUB_STEP_SUMMARY
              fi
              
              # Method 3: File.io with better parsing
              echo "Uploading to file.io..."
              FILEIO_RESPONSE=$(curl -s -F "file=@$file" https://file.io)
              echo "File.io raw response: $FILEIO_RESPONSE"
              
              # Try multiple ways to extract the URL
              FILEIO_URL=$(echo "$FILEIO_RESPONSE" | jq -r '.link // empty' 2>/dev/null)
              if [ -z "$FILEIO_URL" ]; then
                FILEIO_URL=$(echo "$FILEIO_RESPONSE" | grep -o '"link":"[^"]*' | cut -d'"' -f4)
              fi
              if [ -z "$FILEIO_URL" ]; then
                FILEIO_URL=$(echo "$FILEIO_RESPONSE" | grep -o 'https://file.io/[^"]*')
              fi
              
              if [ -n "$FILEIO_URL" ] && [[ $FILEIO_URL == http* ]]; then
                echo "- **File.io**: [Download]($FILEIO_URL) (14 days)" >> $GITHUB_STEP_SUMMARY
                echo "✅ File.io: $FILEIO_URL"
              else
                echo "- ❌ File.io failed" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "---" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # List all downloaded files for debugging
          echo "### 📋 Downloaded Files" >> $GITHUB_STEP_SUMMARY
          ls -la >> $GITHUB_STEP_SUMMARY

      # Optional: Keep artifact as backup
      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: download-${{ github.event.inputs.download_id }}-${{ github.event.inputs.format }}
          path: downloads/**/*